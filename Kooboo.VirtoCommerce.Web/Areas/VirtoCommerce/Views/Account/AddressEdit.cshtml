@model AddressEditModel
@{
	ViewBag.Title = "addressbook";
	Layout = "_Layout.cshtml";
	var backUrl = String.IsNullOrEmpty(Request["OrganizationId"]) ? Url.Action("AddressBook", "Account") : Url.Action("CompanyAddressBook", "Account");
}
<script type="text/javascript" language=javascript>

	$(document).ready(function () {
		var id = '@ViewData.TemplateInfo.GetFullHtmlFieldId(String.Empty)';
		var c = new VirtoAddress(id);
		$('#Address_StateProvinceId option:selected').each(function(){
			this.selected=false;
		});
		$('#Address_StateProvinceId option[value="@Model.Address.StateProvince"]').attr("selected", "selected");
		$('div.block-content ul li').each(function()
			{
				$(this).removeClass('current');
				if ($(this).html().indexOf('Address Book') > 0)
				{
					$(this).addClass('current');
				}
				
			}
		);		
	});
	var v_regions = @Html.JsonSerialize(Model.ScriptCountryRegions);
</script>
<script type="text/javascript">

</script>
<form method="post" action="@Url.Action("AddressEdit", "Account")">
	<h1>Edit Address</h1>
	@Html.HiddenFor(m => m.Address.AddressId)
	@Html.HiddenFor(m => m.Address.Name)
	@Html.HiddenFor(m => m.Address.CountryName)
	@Html.HiddenFor(m => m.OrganizationId, new { @value = @Request["OrganizationId"] })
	<div class="fieldset">
		<h2 class="legend">Contact Information</h2>
		<ul class="form-list">
			<li class="fields">
				<div class="field input-firstname">
					<label for="billing:firstname">
						First Name<span class="required">*</span></label><br/>
					@Html.TextBoxFor(m => m.Address.FirstName, new { @class = "input-text" })<br />
					@Html.ValidationMessageFor(m => m.Address.FirstName, "First Name required")
				</div>
				<div class="field input-lastname">
					<label for="billing:lastname">
						Last Name <span class="required">*</span></label><br/>
					@Html.TextBoxFor(m => m.Address.LastName, new { @class = "input-text" })<br />
					@Html.ValidationMessageFor(m => m.Address.LastName, "Last Name required")
				</div>
			</li>
			<li class="fields">
				<div class="field input-email">
					<label for="billing:email">
						Email Address <span class="required">*</span></label><br/>
					@Html.TextBoxFor(m => m.Address.Email, new { @class = "validate-email input-text" })<br />
					@Html.ValidationMessageFor(m => m.Address.Email, "This a required field")
				</div>
				<div style="display: none" id="onestepcheckout-email-error" class="clearfix">
					<div class="onestepcheckout-error" id="onestepcheckout-email-error-message">
						Invalid email address.</div>
				</div>
				<div class="field input-telephone">
					<label for="billing:telephone">
						<span class="required">*</span>Telephone
					</label>
					@Html.TextBoxFor(m => m.Address.DaytimePhoneNumber, new { @class = "input-text" })
				</div>
			</li>
		</ul>
	</div>

	<div class="fieldset">
		<h2 class="legend">Address Information</h2>
		<ul class="form-list">
			<li class="wide">
				<div class="field input-address">
					<label for="billing:street1">
						Street Address<span class="required">*</span></label><br/>
					@Html.TextBoxFor(m => m.Address.Line1, new { @class = "input-text onestepcheckout-address-line" })
					@Html.ValidationMessageFor(m => m.Address.Line1, "Address is required")
				</div>
			</li>
			<li class="wide">
				<div class="field input-address">
					@Html.TextBoxFor(m => m.Address.Line2, new { @class = "input-text onestepcheckout-address-line" })
				</div>
			</li>
			<li class="wide">
				<div class="field input-country">
					<label for="billing:country_id">
						Country <span class="required">*</span></label><br/>
					@Html.DropDownListFor(m => m.Address.CountryCode, new SelectList(Model.Countries, "CountryId", "DisplayName"))
				</div>
			</li>
			<li class="fields">
				<div class="field input-city">
					<label for="billing:city">
						City <span class="required">*</span></label><br/>
					@Html.TextBoxFor(m => m.Address.City, new { @class = "input-text" })
				</div>
			</li>
			<li class="fields" id="">
				<div class="field input-postcode">
					<label for="billing:postcode">
						Zip Code <span class="required">*</span></label><br/>
					@Html.TextBoxFor(m => m.Address.PostalCode, new { @class = "validate-zip-international input-text" })<br />
					@Html.ValidationMessageFor(m => m.Address.PostalCode, "Zip is required")
				</div>
				<div class="field input-region">
					<label for="billing:region">
						State <span class="required">*</span></label><br/>
						@Html.DropDownList("Address_StateProvinceId", new SelectList(new[] { "select state/province" }))
						@Html.TextBoxFor(m => m.Address.StateProvince, new { @class = "input-text", style = "display:none" })<br />
						@Html.ValidationMessageFor(m => m.Address.StateProvince, "This a required field")
				</div>
			</li>
			<li class="clearfix">
				<div class="field input-company">
					<label for="billing:company">
						Company</label><br/>
					@Html.TextBoxFor(m => m.Address.Organization, new { @class = "input-text" })
				</div>
				<div class="field input-fax">
					<label for="billing:fax">
						Fax</label><br/>
					@Html.TextBoxFor(m => m.Address.FaxNumber, new { @class = "input-text" })
				</div>
			</li>
		</ul>
		@if (!String.IsNullOrEmpty(Model.Address.AddressId) && Model.Address.Name != null)
		{
			if (!Model.Address.Name.Contains(UserHelper.DefaultBilling))
			{
				@Html.CheckBoxFor(m => m.IsDefaultBilling, null)
				@Html.LabelFor(m => m.IsDefaultBilling, null, new ViewDataDictionary())
			}
			
			<br />
			if (!Model.Address.Name.Contains(UserHelper.DefaultShipping))
			{
				@Html.CheckBoxFor(m => m.IsDefaultShipping)
			    @Html.LabelFor(m => m.IsDefaultShipping, null, new ViewDataDictionary())
			}
		}
	</div>
	<div class="buttons-set">
		<p class="required">* Required Fields</p>
		<p class="back-link">
			<a href="@backUrl">
		<small>« </small>Back</a></p>
		<button class="button" title="Save Address" type="submit"><span><span>Save Address</span></span></button>
	</div>
</form>